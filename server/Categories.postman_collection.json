{
	"info": {
		"_postman_id": "6e1b2257-46f1-4352-b624-27242fecf444",
		"name": "CATEGORIES",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38122067"
	},
	"item": [
		{
			"name": "VALID INPUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains success message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Category created successfully!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"BEDROOM\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/categories/v1/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"categories",
						"v1",
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "EMPTY INPUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 (bad request)\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for empty name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid category name. No spaces allowed, only letters and numbers.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/categories/v1/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"categories",
						"v1",
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "INVALID INPUT WITH SPECIAL CHARACTER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 (bad request)\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for invalid name format\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Invalid category name. No spaces allowed, only letters and numbers.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"BED@ROOM\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/categories/v1/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"categories",
						"v1",
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "DUPLICATE INPUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 (duplicate)\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for duplicate category\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Category already exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"BEDROOM\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/categories/v1/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"categories",
						"v1",
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "CASE INSENSITIVE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if API is case-insensitive for category name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    // Check that category is successfully created or already exists\r",
							"    if (pm.response.code === 201) {\r",
							"        pm.expect(jsonData.message).to.include(\"Category created\");\r",
							"    } else if (pm.response.code === 400) {\r",
							"        pm.expect(jsonData.message).to.include(\"Category already exists\");\r",
							"    } else {\r",
							"        pm.expect.fail(\"Unexpected response code: \" + pm.response.code);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"bedroom\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/categories/v1/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"categories",
						"v1",
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "MULTIPLE SPACES IN BETWEEN THE NAME",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains success message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Category created successfully!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Multiple spaces should be collated to one\", function () {\r",
							"    // Retrieve the original string with multiple spaces from the environment variable\r",
							"    var originalName = pm.environment.get(\"categoryNameWithSpaces\");\r",
							"\r",
							"    // Check if the environment variable is defined and is a string\r",
							"    pm.expect(originalName).to.not.be.undefined;\r",
							"    pm.expect(originalName).to.be.a('string');\r",
							"\r",
							"    // Define a function to collapse multiple spaces into one\r",
							"    function collapseSpaces(str) {\r",
							"        return str.replace(/\\s+/g, ' ').trim();\r",
							"    }\r",
							"\r",
							"    // Normalize the original string by collapsing spaces\r",
							"    var normalizedName = collapseSpaces(originalName);\r",
							"\r",
							"    // Parse the response JSON\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    // Check if the name in the response matches the normalized string\r",
							"    pm.expect(jsonData.name).to.eql(normalizedName);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"BED                     ROOM\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/categories/v1/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"categories",
						"v1",
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "LEADING AND TRAILING SPACES",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Leading and trailing spaces should be ignored in category name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Check if the response contains a 'name' field and it is trimmed\r",
							"    pm.expect(jsonData.name).to.not.be.undefined;\r",
							"    \r",
							"    // Remove leading and trailing spaces from the request name and compare it to the response\r",
							"    var trimmedName = \"  CategoryNameWithSpaces  \".trim();\r",
							"    \r",
							"    // Assert that the API returned the trimmed version of the name\r",
							"    pm.expect(jsonData.name).to.eql(trimmedName);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"                   BEDROOM                               \"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/categories/v1/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"categories",
						"v1",
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "GETTING ONE CATEGORY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: Status code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response contains success message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    //pm.expect(jsonData).to.have.property(\"categories\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/categories/v1/categories/66e933f5dcef86a9757e418f",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"categories",
						"v1",
						"categories",
						"66e933f5dcef86a9757e418f"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET ALL CATEGORIES",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Each object in the response contains 'name' property\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Check if the response is an array\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"\r",
							"    // Loop through each object in the array and check for 'categories' property\r",
							"    jsonData.forEach(function (item) {\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/categories/v1/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"categories",
						"v1",
						"categories"
					]
				}
			},
			"response": []
		}
	]
}